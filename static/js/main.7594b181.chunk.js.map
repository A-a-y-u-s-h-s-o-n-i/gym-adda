{"version":3,"sources":["Logo.svg","images/background.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,wC,sMCwE5BC,MAnEf,WACE,OACE,yBAAKC,UAAU,cACX,yBAAKA,UAAU,8CACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,SAErC,4BAAQH,UAAU,iBAAiBI,KAAK,SAASC,cAAY,WACrDC,cAAY,0BAA0BC,gBAAc,yBACpDC,gBAAc,QAAQC,aAAW,qBACrC,0BAAMT,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BU,GAAG,0BACzC,wBAAIV,UAAU,2BACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWW,KAAK,KAA7B,SAEJ,wBAAIX,UAAU,YACV,uBAAGA,UAAU,WAAWW,KAAK,KAA7B,iBAEJ,wBAAIX,UAAU,YACV,uBAAGA,UAAU,WAAWW,KAAK,KAA7B,UAEJ,wBAAIX,UAAU,YACV,uBAAGA,UAAU,WAAWW,KAAK,KAA7B,cAEJ,wBAAIX,UAAU,YACV,uBAAGA,UAAU,WAAWW,KAAK,KAA7B,aAEJ,wBAAIX,UAAU,YACV,uBAAGA,UAAU,WAAWW,KAAK,KAA7B,cAMpB,yBAAKX,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,wBAAIA,UAAU,WAAd,+BAGA,2BACI,yCADJ,8SAGA,qNAGA,yBAAKC,IAAKC,IAAMC,IAAI,WAG5B,yBAAKH,UAAU,YACX,yBAAKA,UAAU,wDACX,yBAAKA,UAAU,YAAYC,IAAKW,IAAOT,IAAI,cAK3D,yBAAKH,UAAU,0BACX,yCAAc,iDCtDNa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7594b181.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.16c0d64e.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.abd9ba68.png\";","import React from 'react';\nimport './App.css';\nimport image from './images/background.png';\nimport logo from './Logo.svg';\n\nfunction App() {\n  return (\n    <div className=\"background\">\n        <nav className=\"navbar navbar-expand-md navbar-dark nav-bg\">\n            <div className=\"container\">\n                <img className=\"logo\" src={logo} alt=\"LOGO\"/>\n                {/*<a className=\"navbar-brand\" href=\"#\"><img src={logo} alt=\"LOGO\"/></a>*/}\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav ml-auto mr-5\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Home</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Accessories </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Tutor</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">One-O-One</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Register</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#\">Login</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n         </nav>\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <div className=\"box-margin\">\n                        <h1 className=\"display\">\n                            Bring Your Gym to Your Home\n                        </h1>\n                        <p>\n                            <span>GymAdda</span> is a place where you can access your Gym at our Home. GymAdda provides you Online classes with your One-O-One Mentor that helps you in exercise and also provides you to all the equipment and accessories that used in gym. So what are you waiting for, grab your phone and place a tutor for training.\n                        </p>\n                        <p>\n                            A gym is a place with number of equipment's and machines used by the people to do exercises.  \"Gym\" is also slang for \"fitness centre\", which is often an area for indoor recreation.\n                        </p>\n                        <img src={logo} alt=\"LOGO\"/>\n                    </div>\n                </div>\n                <div className=\"col-md-6\">\n                    <div className=\"box d-flex align-items-center justify-content-center\">\n                        <img className=\"box-image\" src={image} alt=\"Image\"/>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div className=\"container fixed-bottom\">\n            <p>Design by- <span>Aayush Soni</span></p>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}